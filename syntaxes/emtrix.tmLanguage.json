{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Emtrix",
	"patterns": [
		{
            "name": "meta.embedded.emtrix",
            "include": "#expression"
        }
	],
	"repository": {
        "expression": {
            "patterns": [
                {
                    "include": "#keywords"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#constants"
                }
                ,
                {
                    "include": "#bob"
                },
                {
                    "include": "#variables"
                }
            ]
        },
        "bob": {
            "patterns": [
                {
                    "name": "brackets.square.emtrix",
                    "match": "\\[|\\]"
                }
            ]
        },
		"keywords": {
			"patterns": [
                {
                    "name": "keyword.control.emtrix",
                    "match": "\\b(if|while|for|return)\\b"
			    },
                {
                    "name": "support.function.emtrix",
                    "match": "\\b(T|eig|svd|X|inv|det)\\b"
                }
            ]
		},
        "comments": {
			"patterns": [{
				"name": "constant.numeric.emtrix",
				"match": "-?[0-9]+(\\.[0-9]+)?"
			},
            {
                "name": "comment.block.emtrix",
                "begin": "/\\*",
                "end": "\\*/"
            }]
		},
        "constants": {
			"patterns": [{
				"name": "comment.line.emtrix",
				"match": "//.*"
			}]
		},
        "variables": {
			"patterns": [{
				"name": "variable.other.emtrix",
				"match": "[a-zA-Z][a-zA-Z0-9]*"
			}]
		},
		"strings": {
			"name": "string.quoted.double.emtrix",
			"begin": "\\>",
            "end": "\\n",
			"patterns": [
				{
					"include": "#paren-expression"
				}
			]
		},
        "paren-expression": {
            "begin": "\\{",
            "end": "\\}",
            "beginCaptures": {
              "0": { "name": "punctuation.paren.open" }
            },
            "endCaptures": {
              "0": { "name": "punctuation.paren.close" }
            },
            "name": "meta.embedded.expression.group",
            "patterns": [{ "include": "#expression" }]
          }
	},
	"scopeName": "source.em"
}